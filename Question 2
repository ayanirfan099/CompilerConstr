using System;
using System.Text.RegularExpressions;
using System.Data;
using System.Linq;

class Program
{
    static void Main()
    {
        // Input code string with variable declarations, some of which contain special characters
        string inputCode = "var a1 = 12@; float b2 = 3.14$$; int c3 = 5#; string d4 = 'text';";
        
        // Regex pattern to match:
        // - variable types: var, float, int, string
        // - variable names starting with a, b, or c followed by digits (e.g., a1, b2, c3)
        // - values that contain at least one special (non-alphanumeric, non-whitespace) character
        string pattern = @"(var|float|int|string)\s+([abc]\d+)\s*=\s*([^;]*[^a-zA-Z0-9\s][^;]*);";
        
        // Apply the regex pattern to find all matches in the input code
        var matches = Regex.Matches(inputCode, pattern);
        
        // Output table headers for displaying results
        Console.WriteLine("VarName\tSpecialSymbol\tTokenType");
        Console.WriteLine("----------------------------------");
        
        // Loop through each matched variable
        foreach (Match match in matches)
        {
            // Extract the variable name (e.g., a1, b2, c3)
            string varName = match.Groups[2].Value;
            
            // Extract and trim the assigned value (e.g., "12@", "3.14$$", "5#")
            string value = match.Groups[3].Value.Trim();
            
            // Find the first special character in the value
            char specialSymbol = value.FirstOrDefault(c => !char.IsLetterOrDigit(c) && !char.IsWhiteSpace(c));
            
            // Extract the token type (e.g., var, float, int)
            string tokenType = match.Groups[1].Value;
            
            // Print the variable name, special symbol found, and the token type
            Console.WriteLine($"{varName}\t{specialSymbol}\t\t{tokenType}");
        }
    }
}
